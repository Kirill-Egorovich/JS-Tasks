/* Задание 1
Задать массив имен. Создать 2 переменные, которые будут хранить первых 2 имени, вывести их в консоль. 
Создать массив, который будет хранить остальные имена, вывести имена из него по одному в консоль.
Если кол-во элементов массива меньше 2, то вторая переменная должна стать равна "alex".
*/

const names = ['Jack', 'Gven', 'Stan', 'Niko', 'Mike'];

const [name1, name2 = 'Alex', ...otherNames] = names;

console.log(name1);
console.log(name2);

for (let name of otherNames){
    console.log(name);
}



/* Задание 2
Задать массив имен. Задать функцию, которая принимает 3 параметра и выводит их в консоль. 
Передать массив в функцию. Внутри функции каждый параметр должен быть равен одному из элементов массива.
*/

const names2 = ['Ben', 'Kate', 'Mary', 'Roman', 'Carl'];

const filterNames = (name1, name2, name3) => {
    console.log(name1, name2, name3);
};

filterNames(...names2);



/* Задание 3
Задать объект с N полей. Создать 2 переменные, которые будут называться так же, как поля, и хранить 2 значения полей объекта. 
Если соответствующих полей в объекте нет, задать значения чисел 1 и 2. Все остальные поля объекта записать в переменную fields. 
*/

const user = {
    userName: 'Amir',
    age: 15,
    role: 'admin',
    isOnline: false
}

const {userName = 1, age = 2, ...fields} = user;



/* Задание 4
1. Создайте функцию "meanScore", которая будет принимать любое количество аргументов, объединять их в один массив и возвращать среднее значение всех аргументов, округленное до 2 знаков после запятой.
2. Если хотя бы один элемент в этом массиве не является числом - выводим в консоль следующую ошибку:
"Все аргументы в вызове функции должны быть числами!" 
*/

const meanScore = (...args) => {
    if (args.some(arg => typeof arg!== 'number')) {
        console.error('Все аргументы должны быть числами!');
        return;
    }

    const sum = args.reduce((acc, curr) => acc + curr, 0);
    const mean = sum / args.length;

    return mean.toFixed(2);
};

console.log(meanScore(1, 2, 3, 4, 5));
console.log(meanScore(1, 'a', 2));
